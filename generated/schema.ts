// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Powerplant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Powerplant entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Powerplant must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Powerplant", id.toString(), this);
    }
  }

  static load(id: string): Powerplant | null {
    return changetype<Powerplant | null>(store.get("Powerplant", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get number(): i32 {
    let value = this.get("number");
    return value!.toI32();
  }

  set number(value: i32) {
    this.set("number", Value.fromI32(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get area(): string {
    let value = this.get("area");
    return value!.toString();
  }

  set area(value: string) {
    this.set("area", Value.fromString(value));
  }

  get totalEnergyProduced(): BigInt {
    let value = this.get("totalEnergyProduced");
    return value!.toBigInt();
  }

  set totalEnergyProduced(value: BigInt) {
    this.set("totalEnergyProduced", Value.fromBigInt(value));
  }

  get totalEnergySold(): BigInt {
    let value = this.get("totalEnergySold");
    return value!.toBigInt();
  }

  set totalEnergySold(value: BigInt) {
    this.set("totalEnergySold", Value.fromBigInt(value));
  }

  get energyAvailableToBuy(): BigInt {
    let value = this.get("energyAvailableToBuy");
    return value!.toBigInt();
  }

  set energyAvailableToBuy(value: BigInt) {
    this.set("energyAvailableToBuy", Value.fromBigInt(value));
  }

  get substations(): Array<string> | null {
    let value = this.get("substations");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set substations(value: Array<string> | null) {
    if (!value) {
      this.unset("substations");
    } else {
      this.set("substations", Value.fromStringArray(<Array<string>>value));
    }
  }

  get addedAt(): BigInt {
    let value = this.get("addedAt");
    return value!.toBigInt();
  }

  set addedAt(value: BigInt) {
    this.set("addedAt", Value.fromBigInt(value));
  }

  get energiesSoldByDate(): Array<string> | null {
    let value = this.get("energiesSoldByDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set energiesSoldByDate(value: Array<string> | null) {
    if (!value) {
      this.unset("energiesSoldByDate");
    } else {
      this.set(
        "energiesSoldByDate",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get energiesProducedByDate(): Array<string> | null {
    let value = this.get("energiesProducedByDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set energiesProducedByDate(value: Array<string> | null) {
    if (!value) {
      this.unset("energiesProducedByDate");
    } else {
      this.set(
        "energiesProducedByDate",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }
}

export class Substation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Substation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Substation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Substation", id.toString(), this);
    }
  }

  static load(id: string): Substation | null {
    return changetype<Substation | null>(store.get("Substation", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get number(): i32 {
    let value = this.get("number");
    return value!.toI32();
  }

  set number(value: i32) {
    this.set("number", Value.fromI32(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get area(): string {
    let value = this.get("area");
    return value!.toString();
  }

  set area(value: string) {
    this.set("area", Value.fromString(value));
  }

  get totalEnergyBought(): BigInt {
    let value = this.get("totalEnergyBought");
    return value!.toBigInt();
  }

  set totalEnergyBought(value: BigInt) {
    this.set("totalEnergyBought", Value.fromBigInt(value));
  }

  get totalEnergySold(): BigInt {
    let value = this.get("totalEnergySold");
    return value!.toBigInt();
  }

  set totalEnergySold(value: BigInt) {
    this.set("totalEnergySold", Value.fromBigInt(value));
  }

  get energyAvailableToBuy(): BigInt {
    let value = this.get("energyAvailableToBuy");
    return value!.toBigInt();
  }

  set energyAvailableToBuy(value: BigInt) {
    this.set("energyAvailableToBuy", Value.fromBigInt(value));
  }

  get distributors(): Array<string> | null {
    let value = this.get("distributors");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set distributors(value: Array<string> | null) {
    if (!value) {
      this.unset("distributors");
    } else {
      this.set("distributors", Value.fromStringArray(<Array<string>>value));
    }
  }

  get addedAt(): BigInt {
    let value = this.get("addedAt");
    return value!.toBigInt();
  }

  set addedAt(value: BigInt) {
    this.set("addedAt", Value.fromBigInt(value));
  }

  get energiesSoldByDate(): Array<string> | null {
    let value = this.get("energiesSoldByDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set energiesSoldByDate(value: Array<string> | null) {
    if (!value) {
      this.unset("energiesSoldByDate");
    } else {
      this.set(
        "energiesSoldByDate",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get energiesBoughtByDate(): Array<string> | null {
    let value = this.get("energiesBoughtByDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set energiesBoughtByDate(value: Array<string> | null) {
    if (!value) {
      this.unset("energiesBoughtByDate");
    } else {
      this.set(
        "energiesBoughtByDate",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get powerplant(): string | null {
    let value = this.get("powerplant");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set powerplant(value: string | null) {
    if (!value) {
      this.unset("powerplant");
    } else {
      this.set("powerplant", Value.fromString(<string>value));
    }
  }
}

export class Distributor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Distributor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Distributor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Distributor", id.toString(), this);
    }
  }

  static load(id: string): Distributor | null {
    return changetype<Distributor | null>(store.get("Distributor", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get number(): i32 {
    let value = this.get("number");
    return value!.toI32();
  }

  set number(value: i32) {
    this.set("number", Value.fromI32(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get area(): string {
    let value = this.get("area");
    return value!.toString();
  }

  set area(value: string) {
    this.set("area", Value.fromString(value));
  }

  get totalEnergyBought(): BigInt {
    let value = this.get("totalEnergyBought");
    return value!.toBigInt();
  }

  set totalEnergyBought(value: BigInt) {
    this.set("totalEnergyBought", Value.fromBigInt(value));
  }

  get totalEnergySold(): BigInt {
    let value = this.get("totalEnergySold");
    return value!.toBigInt();
  }

  set totalEnergySold(value: BigInt) {
    this.set("totalEnergySold", Value.fromBigInt(value));
  }

  get energyAvailableToBuy(): BigInt {
    let value = this.get("energyAvailableToBuy");
    return value!.toBigInt();
  }

  set energyAvailableToBuy(value: BigInt) {
    this.set("energyAvailableToBuy", Value.fromBigInt(value));
  }

  get addedAt(): BigInt {
    let value = this.get("addedAt");
    return value!.toBigInt();
  }

  set addedAt(value: BigInt) {
    this.set("addedAt", Value.fromBigInt(value));
  }

  get energiesSoldByDate(): Array<string> | null {
    let value = this.get("energiesSoldByDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set energiesSoldByDate(value: Array<string> | null) {
    if (!value) {
      this.unset("energiesSoldByDate");
    } else {
      this.set(
        "energiesSoldByDate",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get energiesBoughtByDate(): Array<string> | null {
    let value = this.get("energiesBoughtByDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set energiesBoughtByDate(value: Array<string> | null) {
    if (!value) {
      this.unset("energiesBoughtByDate");
    } else {
      this.set(
        "energiesBoughtByDate",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get substation(): string | null {
    let value = this.get("substation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set substation(value: string | null) {
    if (!value) {
      this.unset("substation");
    } else {
      this.set("substation", Value.fromString(<string>value));
    }
  }
}

export class DailyEnergy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyEnergy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyEnergy must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyEnergy", id.toString(), this);
    }
  }

  static load(id: string): DailyEnergy | null {
    return changetype<DailyEnergy | null>(store.get("DailyEnergy", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get date(): string {
    let value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get userId(): BigInt {
    let value = this.get("userId");
    return value!.toBigInt();
  }

  set userId(value: BigInt) {
    this.set("userId", Value.fromBigInt(value));
  }

  get actionType(): string {
    let value = this.get("actionType");
    return value!.toString();
  }

  set actionType(value: string) {
    this.set("actionType", Value.fromString(value));
  }
}
