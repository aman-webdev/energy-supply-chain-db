// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DistributorAdded extends ethereum.Event {
  get params(): DistributorAdded__Params {
    return new DistributorAdded__Params(this);
  }
}

export class DistributorAdded__Params {
  _event: DistributorAdded;

  constructor(event: DistributorAdded) {
    this._event = event;
  }

  get distributorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get energyAvailableToBuy(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DistributorConnectedToSubstation extends ethereum.Event {
  get params(): DistributorConnectedToSubstation__Params {
    return new DistributorConnectedToSubstation__Params(this);
  }
}

export class DistributorConnectedToSubstation__Params {
  _event: DistributorConnectedToSubstation;

  constructor(event: DistributorConnectedToSubstation) {
    this._event = event;
  }

  get distributorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get substationId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get prevSubstationId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EnergyAddedByPowerPlant extends ethereum.Event {
  get params(): EnergyAddedByPowerPlant__Params {
    return new EnergyAddedByPowerPlant__Params(this);
  }
}

export class EnergyAddedByPowerPlant__Params {
  _event: EnergyAddedByPowerPlant;

  constructor(event: EnergyAddedByPowerPlant) {
    this._event = event;
  }

  get powerplantId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get energyAdded(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get date(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EnergyBoughtByDistributor extends ethereum.Event {
  get params(): EnergyBoughtByDistributor__Params {
    return new EnergyBoughtByDistributor__Params(this);
  }
}

export class EnergyBoughtByDistributor__Params {
  _event: EnergyBoughtByDistributor;

  constructor(event: EnergyBoughtByDistributor) {
    this._event = event;
  }

  get distributorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get energyBought(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get date(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EnergyBoughtBySubstation extends ethereum.Event {
  get params(): EnergyBoughtBySubstation__Params {
    return new EnergyBoughtBySubstation__Params(this);
  }
}

export class EnergyBoughtBySubstation__Params {
  _event: EnergyBoughtBySubstation;

  constructor(event: EnergyBoughtBySubstation) {
    this._event = event;
  }

  get substationId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get energyBought(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get date(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PowerPlantAdded extends ethereum.Event {
  get params(): PowerPlantAdded__Params {
    return new PowerPlantAdded__Params(this);
  }
}

export class PowerPlantAdded__Params {
  _event: PowerPlantAdded;

  constructor(event: PowerPlantAdded) {
    this._event = event;
  }

  get powerplantId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SubstationAdded extends ethereum.Event {
  get params(): SubstationAdded__Params {
    return new SubstationAdded__Params(this);
  }
}

export class SubstationAdded__Params {
  _event: SubstationAdded;

  constructor(event: SubstationAdded) {
    this._event = event;
  }

  get substationId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get energyAvailableToBuy(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SubstationConnectedToPowerPlant extends ethereum.Event {
  get params(): SubstationConnectedToPowerPlant__Params {
    return new SubstationConnectedToPowerPlant__Params(this);
  }
}

export class SubstationConnectedToPowerPlant__Params {
  _event: SubstationConnectedToPowerPlant;

  constructor(event: SubstationConnectedToPowerPlant) {
    this._event = event;
  }

  get substationId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get powerPlantId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get prevPowerplantId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EnergySupplyChain__distributorsResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: string;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: string,
    value3: string,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getSubstationId(): BigInt {
    return this.value0;
  }

  getDistributorAddress(): Address {
    return this.value1;
  }

  getName(): string {
    return this.value2;
  }

  getArea(): string {
    return this.value3;
  }

  getEnergyAvailable(): BigInt {
    return this.value4;
  }

  getTotalEnergySold(): BigInt {
    return this.value5;
  }

  getTotalEnergyBought(): BigInt {
    return this.value6;
  }
}

export class EnergySupplyChain__getDistributorByIdResultValue0Struct extends ethereum.Tuple {
  get substationId(): BigInt {
    return this[0].toBigInt();
  }

  get distributorAddress(): Address {
    return this[1].toAddress();
  }

  get name(): string {
    return this[2].toString();
  }

  get area(): string {
    return this[3].toString();
  }

  get energyAvailable(): BigInt {
    return this[4].toBigInt();
  }

  get consumerIds(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get totalEnergySold(): BigInt {
    return this[6].toBigInt();
  }

  get totalEnergyBought(): BigInt {
    return this[7].toBigInt();
  }
}

export class EnergySupplyChain__getPowerplantByIdResultValue0Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get area(): string {
    return this[1].toString();
  }

  get powerplantAddress(): Address {
    return this[2].toAddress();
  }

  get substationIds(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get totalEnergyProduced(): BigInt {
    return this[4].toBigInt();
  }

  get totalEnergySold(): BigInt {
    return this[5].toBigInt();
  }

  get energyAvailableToBuy(): BigInt {
    return this[6].toBigInt();
  }
}

export class EnergySupplyChain__getSubstationByIdResultValue0Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get area(): string {
    return this[1].toString();
  }

  get powerplantId(): BigInt {
    return this[2].toBigInt();
  }

  get substationAddress(): Address {
    return this[3].toAddress();
  }

  get totalEnergyReceived(): BigInt {
    return this[4].toBigInt();
  }

  get totalEnergySold(): BigInt {
    return this[5].toBigInt();
  }

  get distributorIds(): Array<BigInt> {
    return this[6].toBigIntArray();
  }

  get energyAvailableToBuy(): BigInt {
    return this[7].toBigInt();
  }
}

export class EnergySupplyChain__getSubstationsOfPowerPlantResultValue0Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get area(): string {
    return this[1].toString();
  }

  get powerplantId(): BigInt {
    return this[2].toBigInt();
  }

  get substationAddress(): Address {
    return this[3].toAddress();
  }

  get totalEnergyReceived(): BigInt {
    return this[4].toBigInt();
  }

  get totalEnergySold(): BigInt {
    return this[5].toBigInt();
  }

  get distributorIds(): Array<BigInt> {
    return this[6].toBigIntArray();
  }

  get energyAvailableToBuy(): BigInt {
    return this[7].toBigInt();
  }
}

export class EnergySupplyChain__powerPlantsResult {
  value0: string;
  value1: string;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: string,
    value1: string,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getArea(): string {
    return this.value1;
  }

  getPowerplantAddress(): Address {
    return this.value2;
  }

  getTotalEnergyProduced(): BigInt {
    return this.value3;
  }

  getTotalEnergySold(): BigInt {
    return this.value4;
  }

  getEnergyAvailableToBuy(): BigInt {
    return this.value5;
  }
}

export class EnergySupplyChain__substationsResult {
  value0: string;
  value1: string;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: string,
    value1: string,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getArea(): string {
    return this.value1;
  }

  getPowerplantId(): BigInt {
    return this.value2;
  }

  getSubstationAddress(): Address {
    return this.value3;
  }

  getTotalEnergyReceived(): BigInt {
    return this.value4;
  }

  getTotalEnergySold(): BigInt {
    return this.value5;
  }

  getEnergyAvailableToBuy(): BigInt {
    return this.value6;
  }
}

export class EnergySupplyChain extends ethereum.SmartContract {
  static bind(address: Address): EnergySupplyChain {
    return new EnergySupplyChain("EnergySupplyChain", address);
  }

  distributorAddressToIds(param0: Address): BigInt {
    let result = super.call(
      "distributorAddressToIds",
      "distributorAddressToIds(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_distributorAddressToIds(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "distributorAddressToIds",
      "distributorAddressToIds(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  distributors(param0: BigInt): EnergySupplyChain__distributorsResult {
    let result = super.call(
      "distributors",
      "distributors(uint256):(uint256,address,string,string,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new EnergySupplyChain__distributorsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toString(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_distributors(
    param0: BigInt
  ): ethereum.CallResult<EnergySupplyChain__distributorsResult> {
    let result = super.tryCall(
      "distributors",
      "distributors(uint256):(uint256,address,string,string,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EnergySupplyChain__distributorsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toString(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  getDistributorById(
    _distributorIndex: BigInt
  ): EnergySupplyChain__getDistributorByIdResultValue0Struct {
    let result = super.call(
      "getDistributorById",
      "getDistributorById(uint256):((uint256,address,string,string,uint256,uint256[],uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_distributorIndex)]
    );

    return changetype<EnergySupplyChain__getDistributorByIdResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getDistributorById(
    _distributorIndex: BigInt
  ): ethereum.CallResult<
    EnergySupplyChain__getDistributorByIdResultValue0Struct
  > {
    let result = super.tryCall(
      "getDistributorById",
      "getDistributorById(uint256):((uint256,address,string,string,uint256,uint256[],uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_distributorIndex)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<EnergySupplyChain__getDistributorByIdResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getDistributorEnergyBoguhtByDay(
    _distributorIndex: BigInt,
    _day: BigInt
  ): BigInt {
    let result = super.call(
      "getDistributorEnergyBoguhtByDay",
      "getDistributorEnergyBoguhtByDay(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_distributorIndex),
        ethereum.Value.fromUnsignedBigInt(_day)
      ]
    );

    return result[0].toBigInt();
  }

  try_getDistributorEnergyBoguhtByDay(
    _distributorIndex: BigInt,
    _day: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDistributorEnergyBoguhtByDay",
      "getDistributorEnergyBoguhtByDay(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_distributorIndex),
        ethereum.Value.fromUnsignedBigInt(_day)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPowerPlantEnergyProducedByDay(
    _powerplantIndex: BigInt,
    _day: BigInt
  ): BigInt {
    let result = super.call(
      "getPowerPlantEnergyProducedByDay",
      "getPowerPlantEnergyProducedByDay(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_powerplantIndex),
        ethereum.Value.fromUnsignedBigInt(_day)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPowerPlantEnergyProducedByDay(
    _powerplantIndex: BigInt,
    _day: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPowerPlantEnergyProducedByDay",
      "getPowerPlantEnergyProducedByDay(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_powerplantIndex),
        ethereum.Value.fromUnsignedBigInt(_day)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPowerPlantEnergySoldByDay(_powerplantIndex: BigInt, _day: BigInt): BigInt {
    let result = super.call(
      "getPowerPlantEnergySoldByDay",
      "getPowerPlantEnergySoldByDay(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_powerplantIndex),
        ethereum.Value.fromUnsignedBigInt(_day)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPowerPlantEnergySoldByDay(
    _powerplantIndex: BigInt,
    _day: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPowerPlantEnergySoldByDay",
      "getPowerPlantEnergySoldByDay(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_powerplantIndex),
        ethereum.Value.fromUnsignedBigInt(_day)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPowerplantById(
    _powerplantIndex: BigInt
  ): EnergySupplyChain__getPowerplantByIdResultValue0Struct {
    let result = super.call(
      "getPowerplantById",
      "getPowerplantById(uint256):((string,string,address,uint256[],uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_powerplantIndex)]
    );

    return changetype<EnergySupplyChain__getPowerplantByIdResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getPowerplantById(
    _powerplantIndex: BigInt
  ): ethereum.CallResult<
    EnergySupplyChain__getPowerplantByIdResultValue0Struct
  > {
    let result = super.tryCall(
      "getPowerplantById",
      "getPowerplantById(uint256):((string,string,address,uint256[],uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_powerplantIndex)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<EnergySupplyChain__getPowerplantByIdResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getSubstationById(
    _substationIndex: BigInt
  ): EnergySupplyChain__getSubstationByIdResultValue0Struct {
    let result = super.call(
      "getSubstationById",
      "getSubstationById(uint256):((string,string,uint256,address,uint256,uint256,uint256[],uint256))",
      [ethereum.Value.fromUnsignedBigInt(_substationIndex)]
    );

    return changetype<EnergySupplyChain__getSubstationByIdResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getSubstationById(
    _substationIndex: BigInt
  ): ethereum.CallResult<
    EnergySupplyChain__getSubstationByIdResultValue0Struct
  > {
    let result = super.tryCall(
      "getSubstationById",
      "getSubstationById(uint256):((string,string,uint256,address,uint256,uint256,uint256[],uint256))",
      [ethereum.Value.fromUnsignedBigInt(_substationIndex)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<EnergySupplyChain__getSubstationByIdResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getSubstationEnergyBoughtByDay(
    _substationIndex: BigInt,
    _day: BigInt
  ): BigInt {
    let result = super.call(
      "getSubstationEnergyBoughtByDay",
      "getSubstationEnergyBoughtByDay(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_substationIndex),
        ethereum.Value.fromUnsignedBigInt(_day)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSubstationEnergyBoughtByDay(
    _substationIndex: BigInt,
    _day: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSubstationEnergyBoughtByDay",
      "getSubstationEnergyBoughtByDay(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_substationIndex),
        ethereum.Value.fromUnsignedBigInt(_day)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSubstationEnergySoldByDay(_substationIndex: BigInt, _day: BigInt): BigInt {
    let result = super.call(
      "getSubstationEnergySoldByDay",
      "getSubstationEnergySoldByDay(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_substationIndex),
        ethereum.Value.fromUnsignedBigInt(_day)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSubstationEnergySoldByDay(
    _substationIndex: BigInt,
    _day: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSubstationEnergySoldByDay",
      "getSubstationEnergySoldByDay(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_substationIndex),
        ethereum.Value.fromUnsignedBigInt(_day)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSubstationsOfPowerPlant(
    _powerplantIndex: BigInt
  ): Array<EnergySupplyChain__getSubstationsOfPowerPlantResultValue0Struct> {
    let result = super.call(
      "getSubstationsOfPowerPlant",
      "getSubstationsOfPowerPlant(uint256):((string,string,uint256,address,uint256,uint256,uint256[],uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(_powerplantIndex)]
    );

    return result[0].toTupleArray<
      EnergySupplyChain__getSubstationsOfPowerPlantResultValue0Struct
    >();
  }

  try_getSubstationsOfPowerPlant(
    _powerplantIndex: BigInt
  ): ethereum.CallResult<
    Array<EnergySupplyChain__getSubstationsOfPowerPlantResultValue0Struct>
  > {
    let result = super.tryCall(
      "getSubstationsOfPowerPlant",
      "getSubstationsOfPowerPlant(uint256):((string,string,uint256,address,uint256,uint256,uint256[],uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(_powerplantIndex)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        EnergySupplyChain__getSubstationsOfPowerPlantResultValue0Struct
      >()
    );
  }

  powerPlants(param0: BigInt): EnergySupplyChain__powerPlantsResult {
    let result = super.call(
      "powerPlants",
      "powerPlants(uint256):(string,string,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new EnergySupplyChain__powerPlantsResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_powerPlants(
    param0: BigInt
  ): ethereum.CallResult<EnergySupplyChain__powerPlantsResult> {
    let result = super.tryCall(
      "powerPlants",
      "powerPlants(uint256):(string,string,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EnergySupplyChain__powerPlantsResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  powerPlantsAddressToIds(param0: Address): BigInt {
    let result = super.call(
      "powerPlantsAddressToIds",
      "powerPlantsAddressToIds(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_powerPlantsAddressToIds(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "powerPlantsAddressToIds",
      "powerPlantsAddressToIds(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  substations(param0: BigInt): EnergySupplyChain__substationsResult {
    let result = super.call(
      "substations",
      "substations(uint256):(string,string,uint256,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new EnergySupplyChain__substationsResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_substations(
    param0: BigInt
  ): ethereum.CallResult<EnergySupplyChain__substationsResult> {
    let result = super.tryCall(
      "substations",
      "substations(uint256):(string,string,uint256,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EnergySupplyChain__substationsResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  substationsAddressToIds(param0: Address): BigInt {
    let result = super.call(
      "substationsAddressToIds",
      "substationsAddressToIds(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_substationsAddressToIds(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "substationsAddressToIds",
      "substationsAddressToIds(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddDistributorCall extends ethereum.Call {
  get inputs(): AddDistributorCall__Inputs {
    return new AddDistributorCall__Inputs(this);
  }

  get outputs(): AddDistributorCall__Outputs {
    return new AddDistributorCall__Outputs(this);
  }
}

export class AddDistributorCall__Inputs {
  _call: AddDistributorCall;

  constructor(call: AddDistributorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _area(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _energyAvailableToBuy(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddDistributorCall__Outputs {
  _call: AddDistributorCall;

  constructor(call: AddDistributorCall) {
    this._call = call;
  }
}

export class AddEnergyAvailableToBuyCall extends ethereum.Call {
  get inputs(): AddEnergyAvailableToBuyCall__Inputs {
    return new AddEnergyAvailableToBuyCall__Inputs(this);
  }

  get outputs(): AddEnergyAvailableToBuyCall__Outputs {
    return new AddEnergyAvailableToBuyCall__Outputs(this);
  }
}

export class AddEnergyAvailableToBuyCall__Inputs {
  _call: AddEnergyAvailableToBuyCall;

  constructor(call: AddEnergyAvailableToBuyCall) {
    this._call = call;
  }

  get _energyAvailableToBuy(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddEnergyAvailableToBuyCall__Outputs {
  _call: AddEnergyAvailableToBuyCall;

  constructor(call: AddEnergyAvailableToBuyCall) {
    this._call = call;
  }
}

export class AddPowerPlantCall extends ethereum.Call {
  get inputs(): AddPowerPlantCall__Inputs {
    return new AddPowerPlantCall__Inputs(this);
  }

  get outputs(): AddPowerPlantCall__Outputs {
    return new AddPowerPlantCall__Outputs(this);
  }
}

export class AddPowerPlantCall__Inputs {
  _call: AddPowerPlantCall;

  constructor(call: AddPowerPlantCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _area(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _energyAvailableToBuy(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddPowerPlantCall__Outputs {
  _call: AddPowerPlantCall;

  constructor(call: AddPowerPlantCall) {
    this._call = call;
  }
}

export class AddSubstationCall extends ethereum.Call {
  get inputs(): AddSubstationCall__Inputs {
    return new AddSubstationCall__Inputs(this);
  }

  get outputs(): AddSubstationCall__Outputs {
    return new AddSubstationCall__Outputs(this);
  }
}

export class AddSubstationCall__Inputs {
  _call: AddSubstationCall;

  constructor(call: AddSubstationCall) {
    this._call = call;
  }

  get _energyAvailableToBuy(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _area(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class AddSubstationCall__Outputs {
  _call: AddSubstationCall;

  constructor(call: AddSubstationCall) {
    this._call = call;
  }
}

export class BuyEnergyFromPowerPlantCall extends ethereum.Call {
  get inputs(): BuyEnergyFromPowerPlantCall__Inputs {
    return new BuyEnergyFromPowerPlantCall__Inputs(this);
  }

  get outputs(): BuyEnergyFromPowerPlantCall__Outputs {
    return new BuyEnergyFromPowerPlantCall__Outputs(this);
  }
}

export class BuyEnergyFromPowerPlantCall__Inputs {
  _call: BuyEnergyFromPowerPlantCall;

  constructor(call: BuyEnergyFromPowerPlantCall) {
    this._call = call;
  }

  get _energyAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyEnergyFromPowerPlantCall__Outputs {
  _call: BuyEnergyFromPowerPlantCall;

  constructor(call: BuyEnergyFromPowerPlantCall) {
    this._call = call;
  }
}

export class BuyEnergyFromSubstationCall extends ethereum.Call {
  get inputs(): BuyEnergyFromSubstationCall__Inputs {
    return new BuyEnergyFromSubstationCall__Inputs(this);
  }

  get outputs(): BuyEnergyFromSubstationCall__Outputs {
    return new BuyEnergyFromSubstationCall__Outputs(this);
  }
}

export class BuyEnergyFromSubstationCall__Inputs {
  _call: BuyEnergyFromSubstationCall;

  constructor(call: BuyEnergyFromSubstationCall) {
    this._call = call;
  }

  get _energyAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyEnergyFromSubstationCall__Outputs {
  _call: BuyEnergyFromSubstationCall;

  constructor(call: BuyEnergyFromSubstationCall) {
    this._call = call;
  }
}

export class ConnectDistributorToSubstationCall extends ethereum.Call {
  get inputs(): ConnectDistributorToSubstationCall__Inputs {
    return new ConnectDistributorToSubstationCall__Inputs(this);
  }

  get outputs(): ConnectDistributorToSubstationCall__Outputs {
    return new ConnectDistributorToSubstationCall__Outputs(this);
  }
}

export class ConnectDistributorToSubstationCall__Inputs {
  _call: ConnectDistributorToSubstationCall;

  constructor(call: ConnectDistributorToSubstationCall) {
    this._call = call;
  }

  get _substationIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConnectDistributorToSubstationCall__Outputs {
  _call: ConnectDistributorToSubstationCall;

  constructor(call: ConnectDistributorToSubstationCall) {
    this._call = call;
  }
}

export class ConnectSubstationToPowerplantCall extends ethereum.Call {
  get inputs(): ConnectSubstationToPowerplantCall__Inputs {
    return new ConnectSubstationToPowerplantCall__Inputs(this);
  }

  get outputs(): ConnectSubstationToPowerplantCall__Outputs {
    return new ConnectSubstationToPowerplantCall__Outputs(this);
  }
}

export class ConnectSubstationToPowerplantCall__Inputs {
  _call: ConnectSubstationToPowerplantCall;

  constructor(call: ConnectSubstationToPowerplantCall) {
    this._call = call;
  }

  get powerplantIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConnectSubstationToPowerplantCall__Outputs {
  _call: ConnectSubstationToPowerplantCall;

  constructor(call: ConnectSubstationToPowerplantCall) {
    this._call = call;
  }
}
